generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id              String            @id @default(uuid())
    username        String            @unique
    email           String            @unique
    bio             String?
    profileImage    String?
    image           String?
    password        String
    groups          GroupMember[]
    posts           Post[]
    summaries       Summary[]
    chats           ChatMessage[]
    adminGroups     Group[]           @relation("GroupAdmin")
    uploadedBooks   Book[]            @relation("BookUploader")
    comments        Comment[]
    readingProgress ReadingProgress[]
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    likedPosts      Post[]            @relation("PostLikes")
}

model Book {
    id              String            @id @default(uuid())
    title           String
    author          String
    fileUrl         String // MinIO link
    uploaderId      String
    uploader        User              @relation("BookUploader", fields: [uploaderId], references: [id])
    sharedWith      SharedBook[]
    posts           Post[]
    readingGoals    ReadingGoal[]
    readingProgress ReadingProgress[]
    summaries       Summary[]
    createdAt       DateTime          @default(now())
}

model Post {
    id        String    @id @default(uuid())
    title     String
    content   String
    bookId    String?
    book      Book?     @relation(fields: [bookId], references: [id])
    authorId  String
    author    User      @relation(fields: [authorId], references: [id])
    moderated Boolean   @default(false)
    approved  Boolean?
    createdAt DateTime  @default(now())
    comments  Comment[]
    likers    User[]    @relation("PostLikes")
}

model Group {
    id          String        @id @default(uuid())
    name        String
    description String?
    adminId     String
    admin       User          @relation("GroupAdmin", fields: [adminId], references: [id])
    members     GroupMember[]
    readingGoal ReadingGoal[]
    messages    ChatMessage[]
}

model GroupMember {
    id       String   @id @default(uuid())
    userId   String
    groupId  String
    role     String // 'admin' or 'member'
    joinedAt DateTime @default(now())
    user     User     @relation(fields: [userId], references: [id])
    group    Group    @relation(fields: [groupId], references: [id])
}

model ChatMessage {
    id          String   @id @default(uuid())
    content     String
    senderId    String
    groupId     String?
    recipientId String? // For DMs
    createdAt   DateTime @default(now())
    sender      User     @relation(fields: [senderId], references: [id])
    group       Group?   @relation(fields: [groupId], references: [id])
}

model ReadingGoal {
    id         String   @id @default(uuid())
    groupId    String
    bookId     String
    dailyPages Int
    startDate  DateTime
    endDate    DateTime
    group      Group    @relation(fields: [groupId], references: [id])
    book       Book     @relation(fields: [bookId], references: [id])
}

model ReadingProgress {
    id          String   @id @default(uuid())
    userId      String
    bookId      String
    currentPage Int
    lastUpdated DateTime @default(now())
    user        User     @relation(fields: [userId], references: [id])
    book        Book     @relation(fields: [bookId], references: [id])
}

model Summary {
    id         String   @id @default(uuid())
    userId     String
    bookId     String
    text       String
    aiFeedback String? // From Gemini
    createdAt  DateTime @default(now())
    user       User     @relation(fields: [userId], references: [id])
    book       Book     @relation(fields: [bookId], references: [id])
}

model Comment {
    id        String   @id @default(uuid())
    postId    String
    userId    String
    page      Int
    content   String
    createdAt DateTime @default(now())
    post      Post     @relation(fields: [postId], references: [id])
    user      User     @relation(fields: [userId], references: [id])
}

model SharedBook {
    id         String   @id @default(uuid())
    bookId     String
    sharedWith String // User ID or group ID
    sharedAt   DateTime @default(now())
    book       Book     @relation(fields: [bookId], references: [id])
}
